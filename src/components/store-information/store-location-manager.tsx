import { useState, useCallback, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { MapPin, Navigation, Search } from 'lucide-react'
import { toast } from 'sonner'

interface LocationData {
  latitude: number
  longitude: number
  address?: string
}

interface StoreLocationManagerProps {
  currentLocation?: {
    latitude?: number
    longitude?: number
  }
  onLocationUpdate: (location: LocationData) => void
}

export function StoreLocationManager({ currentLocation, onLocationUpdate }: StoreLocationManagerProps) {
  const [latitude, setLatitude] = useState(currentLocation?.latitude?.toString() || '')
  const [longitude, setLongitude] = useState(currentLocation?.longitude?.toString() || '')
  const [searchAddress, setSearchAddress] = useState('')
  const [loading, setLoading] = useState(false)

  // Update local state when currentLocation prop changes
  useEffect(() => {
    setLatitude(currentLocation?.latitude?.toString() || '')
    setLongitude(currentLocation?.longitude?.toString() || '')
  }, [currentLocation?.latitude, currentLocation?.longitude])

  // Get current location from browser
  const getCurrentLocation = useCallback(() => {
    if (!navigator.geolocation) {
      toast.error('‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á')
      return
    }

    setLoading(true)
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const { latitude: lat, longitude: lng } = position.coords
        setLatitude(lat.toString())
        setLongitude(lng.toString())
        
        onLocationUpdate({
          latitude: lat,
          longitude: lng
        })
        
        toast.success('‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß')
        setLoading(false)
      },
      (error) => {
        toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πâ: ' + error.message)
        setLoading(false)
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 60000
      }
    )
  }, [onLocationUpdate])

  // Search address using Nominatim (OpenStreetMap)
  const searchLocation = useCallback(async () => {
    if (!searchAddress.trim()) {
      toast.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤')
      return
    }

    setLoading(true)
    try {
      const response = await fetch(
        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(searchAddress + ', Thailand')}&limit=1`
      )
      const data = await response.json()
      
      if (data && data.length > 0) {
        const location = data[0]
        const lat = parseFloat(location.lat)
        const lng = parseFloat(location.lon)
        
        setLatitude(lat.toString())
        setLongitude(lng.toString())
        
        onLocationUpdate({
          latitude: lat,
          longitude: lng,
          address: location.display_name
        })
        
        toast.success('‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡πâ‡∏ß')
      } else {
        toast.error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤')
      }
    } catch (error) {
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á')
    } finally {
      setLoading(false)
    }
  }, [searchAddress, onLocationUpdate])

  // Manual coordinate input
  const handleManualInput = useCallback(() => {
    const lat = parseFloat(latitude)
    const lng = parseFloat(longitude)
    
    if (isNaN(lat) || isNaN(lng)) {
      toast.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
      return
    }
    
    if (lat < -90 || lat > 90) {
      toast.error('‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á -90 ‡∏ñ‡∏∂‡∏á 90')
      return
    }
    
    if (lng < -180 || lng > 180) {
      toast.error('‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á -180 ‡∏ñ‡∏∂‡∏á 180')
      return
    }

    onLocationUpdate({
      latitude: lat,
      longitude: lng
    })
    
    toast.success('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß')
  }, [latitude, longitude, onLocationUpdate])

  // Open location in Google Maps
  const openInGoogleMaps = useCallback(() => {
    const lat = parseFloat(latitude)
    const lng = parseFloat(longitude)
    
    if (isNaN(lat) || isNaN(lng)) {
      toast.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡πà‡∏≠‡∏ô')
      return
    }
    
    const url = `https://www.google.com/maps?q=${lat},${lng}`
    window.open(url, '_blank')
  }, [latitude, longitude])

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <MapPin className="h-5 w-5" />
          ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
        </CardTitle>
        <CardDescription>
          ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏°‡∏≤‡πÑ‡∏î‡πâ
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        
        {/* Current Location Section */}
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h4 className="text-sm font-medium">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</h4>
            <Button 
              variant="outline" 
              size="sm"
              onClick={getCurrentLocation}
              disabled={loading}
            >
              <Navigation className="h-4 w-4 mr-2" />
              ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            </Button>
          </div>
        </div>

        {/* Address Search Section */}
        <div className="space-y-4">
          <h4 className="text-sm font-medium">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</h4>
          <div className="flex gap-2">
            <Input
              placeholder="‡πÉ‡∏™‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏ä‡πà‡∏ô '‡∏ñ‡∏ô‡∏ô‡∏™‡∏µ‡∏•‡∏° ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û'"
              value={searchAddress}
              onChange={(e) => setSearchAddress(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && searchLocation()}
            />
            <Button 
              variant="outline"
              onClick={searchLocation}
              disabled={loading}
            >
              <Search className="h-4 w-4" />
            </Button>
          </div>
        </div>

        {/* Manual Coordinates Section */}
        <div className="space-y-4">
          <h4 className="text-sm font-medium">‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="latitude">‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (Latitude)</Label>
              <Input
                id="latitude"
                type="number"
                step="any"
                placeholder="‡πÄ‡∏ä‡πà‡∏ô 13.7563"
                value={latitude}
                onChange={(e) => setLatitude(e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="longitude">‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î (Longitude)</Label>
              <Input
                id="longitude"
                type="number"
                step="any"
                placeholder="‡πÄ‡∏ä‡πà‡∏ô 100.5018"
                value={longitude}
                onChange={(e) => setLongitude(e.target.value)}
              />
            </div>
          </div>
          
          <div className="flex gap-2">
            <Button 
              variant="secondary"
              onClick={handleManualInput}
              disabled={!latitude || !longitude}
            >
              ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            </Button>
            <Button 
              variant="outline"
              onClick={openInGoogleMaps}
              disabled={!latitude || !longitude}
            >
              ‡∏î‡∏π‡πÉ‡∏ô Google Maps
            </Button>
          </div>
        </div>

        {/* Current Coordinates Display */}
        {latitude && longitude && (
          <div className="p-4 bg-muted rounded-lg">
            <h4 className="text-sm font-medium mb-2">‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</h4>
            <div className="text-sm text-muted-foreground">
              <p>‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î: {latitude}</p>
              <p>‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î: {longitude}</p>
            </div>
          </div>
        )}

        {/* Information */}
        <div className="text-xs text-muted-foreground space-y-1">
          <p>üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:</p>
          <ul className="list-disc list-inside space-y-1 ml-2">
            <li>‡πÉ‡∏ä‡πâ "‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô" ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</li>
            <li>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</li>
            <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô Google Maps ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</li>
            <li>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  )
}